@model EventManagement.UI.Models.Event.EventViewModel
@{
    ViewData["Title"] = "Etkinlik Detayları";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Etkinlik Detayları</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a asp-area="EventManager" asp-controller="Home" asp-action="Index">Panel</a></li>
        <li class="breadcrumb-item"><a asp-area="EventManager" asp-controller="Event" asp-action="Index">Etkinlikler</a></li>
        <li class="breadcrumb-item active">Detaylar</li>
    </ol>
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-xl-8">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <i class="fas fa-info-circle me-1"></i>
                        Etkinlik Bilgileri
                    </div>
                    <div>
                        <span class="badge @Model.StatusClass">@Model.StatusText</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-borderless">
                            <tbody>
                                <tr>
                                    <th style="width: 150px;">@Html.DisplayNameFor(model => model.Title)</th>
                                    <td>@Model.Title</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.Description)</th>
                                    <td>@Model.Description</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.StartDate)</th>
                                    <td>@Model.StartDate.ToString("dd.MM.yyyy HH:mm")</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.EndDate)</th>
                                    <td>@Model.EndDate.ToString("dd.MM.yyyy HH:mm")</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.Location)</th>
                                    <td>@Model.Location</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.MaxAttendees)</th>
                                    <td>@Model.MaxAttendees</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.RegistrationCount)</th>
                                    <td>@Model.RegistrationCount</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.IsPublic)</th>
                                    <td>@(Model.IsPublic ? "Evet" : "Hayır")</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.IsCancelled)</th>
                                    <td>@(Model.IsCancelled ? "Evet" : "Hayır")</td>
                                </tr>
                                <tr>
                                    <th>@Html.DisplayNameFor(model => model.CreatedDate)</th>
                                    <td>@Model.CreatedDate.ToString("dd.MM.yyyy HH:mm")</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="mt-3">
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                            <i class="fas fa-edit"></i> Düzenle
                        </a>
                        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                            <i class="fas fa-trash"></i> Sil
                        </a>
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Listeye Dön
                        </a>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-4">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-users me-1"></i>
                    Katılımcı İstatistikleri
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div class="text-center">
                            <div class="h4 mb-0 text-primary">@Model.RegistrationCount</div>
                            <div class="small text-muted">Mevcut Kayıt</div>
                        </div>
                        
                        <div class="text-center">
                            <div class="h4 mb-0 text-success">@(Model.MaxAttendees.HasValue && Model.MaxAttendees.Value > 0 ? (Model.MaxAttendees.Value - Model.RegistrationCount).ToString() : "∞")</div>
                            <div class="small text-muted">Kalan Kontenjan</div>
                        </div>
                        
                        <div class="text-center">
                            <div class="h4 mb-0 text-info">@(Model.MaxAttendees.HasValue && Model.MaxAttendees.Value > 0 ? $"%{Math.Round((decimal)Model.RegistrationCount / Model.MaxAttendees.Value * 100, 0)}" : "-")</div>
                            <div class="small text-muted">Doluluk Oranı</div>
                        </div>
                    </div>
                    
                    @if (Model.MaxAttendees.HasValue && Model.MaxAttendees.Value > 0)
                    {
                        <div class="progress mb-2" style="height: 15px;">
                            <div class="progress-bar bg-success" role="progressbar" style="width: @(Math.Round((decimal)Model.RegistrationCount / Model.MaxAttendees.Value * 100, 0))%;" 
                                aria-valuenow="@Model.RegistrationCount" aria-valuemin="0" aria-valuemax="@Model.MaxAttendees">
                                @(Math.Round((decimal)Model.RegistrationCount / Model.MaxAttendees.Value * 100, 0))%
                            </div>
                        </div>
                    }
                    
                    <button type="button" class="btn btn-primary w-100 mt-3" data-bs-toggle="modal" data-bs-target="#attendeesModal">
                        <i class="fas fa-list"></i> Katılımcıları Görüntüle
                    </button>
                    
                    <button type="button" class="btn btn-success w-100 mt-2" data-bs-toggle="modal" data-bs-target="#addAttendeeModal">
                        <i class="fas fa-plus"></i> Katılımcı Ekle
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Katılımcı Listesi Modal -->
<div class="modal fade" id="attendeesModal" tabindex="-1" aria-labelledby="attendeesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="attendeesModalLabel">Etkinlik Katılımcıları</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="attendeesLoading" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                    <p class="mt-2">Katılımcılar yükleniyor...</p>
                </div>
                <div id="attendeesTable" class="d-none">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Ad Soyad</th>
                                <th>E-posta</th>
                                <th>Telefon</th>
                                <th>Kayıt Tarihi</th>
                                <th>Durum</th>
                            </tr>
                        </thead>
                        <tbody id="attendeesList">
                            <!-- JavaScript ile doldurulacak -->
                        </tbody>
                    </table>
                </div>
                <div id="noAttendees" class="alert alert-info d-none">
                    Bu etkinliğe henüz katılımcı bulunmamaktadır.
                </div>
                <div id="attendeesError" class="alert alert-danger d-none">
                    Katılımcılar yüklenirken bir hata oluştu.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>

<!-- Katılımcı Ekle Modal -->
<div class="modal fade" id="addAttendeeModal" tabindex="-1" aria-labelledby="addAttendeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAttendeeModalLabel">Katılımcı Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addAttendeeForm">
                    <input type="hidden" id="eventId" value="@Model.Id" />
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="fullName" class="form-label">Ad Soyad</label>
                        <input type="text" class="form-control" id="fullName" name="fullName" required>
                        <div class="invalid-feedback" id="fullNameFeedback"></div>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">E-posta</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                        <div class="invalid-feedback" id="emailFeedback"></div>
                    </div>
                    <div class="mb-3">
                        <label for="phone" class="form-label">Telefon</label>
                        <input type="tel" class="form-control" id="phone" name="phone" required>
                        <div class="invalid-feedback" id="phoneFeedback"></div>
                    </div>
                </form>
                
                <div id="addAttendeeSuccess" class="alert alert-success d-none mt-3">
                    Katılımcı başarıyla eklendi.
                </div>
                <div id="addAttendeeError" class="alert alert-danger d-none mt-3">
                    Katılımcı eklenirken bir hata oluştu.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="addAttendeeBtn">Ekle</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Katılımcı modalı açıldığında
            $('#attendeesModal').on('shown.bs.modal', function () {
                loadAttendees();
            });
            
            // Katılımcı ekleme butonu tıklandığında
            $('#addAttendeeBtn').on('click', function() {
                addAttendee();
            });
        });
        
        function loadAttendees() {
            // Loading göster, hata ve içeriği gizle
            $('#attendeesLoading').removeClass('d-none');
            $('#attendeesTable').addClass('d-none');
            $('#noAttendees').addClass('d-none');
            $('#attendeesError').addClass('d-none');
            
            // AJAX isteği
            $.ajax({
                url: '@Url.Action("GetAttendees", "Event", new { area = "EventManager", id = Model.Id })',
                type: 'GET',
                dataType: 'json',
                success: function(response) {
                    // Loading gizle
                    $('#attendeesLoading').addClass('d-none');
                    
                    if (response.success) {
                        if (response.data && response.data.length > 0) {
                            // Tabloyu temizle
                            $('#attendeesList').empty();
                            
                            // Katılımcıları ekle
                            $.each(response.data, function(index, attendee) {
                                var statusBadge = getStatusBadge(attendee.status, attendee.isCancelled);
                                
                                $('#attendeesList').append(`
                                    <tr>
                                        <td>${attendee.name}</td>
                                        <td>${attendee.email}</td>
                                        <td>${attendee.phone}</td>
                                        <td>${formatDate(attendee.registrationDate)}</td>
                                        <td>${statusBadge}</td>
                                    </tr>
                                `);
                            });
                            
                            // Tabloyu göster
                            $('#attendeesTable').removeClass('d-none');
                        } else {
                            // Katılımcı yoksa uyarı göster
                            $('#noAttendees').removeClass('d-none');
                        }
                    } else {
                        // Hata mesajı göster
                        $('#attendeesError').text(response.message).removeClass('d-none');
                    }
                },
                error: function() {
                    // Loading gizle ve hata göster
                    $('#attendeesLoading').addClass('d-none');
                    $('#attendeesError').text('Sunucu ile iletişim kurulamadı.').removeClass('d-none');
                }
            });
        }
        
        function addAttendee() {
            // Form verilerini al
            var eventId = $('#eventId').val();
            var fullName = $('#fullName').val();
            var email = $('#email').val();
            var phone = $('#phone').val();
            
            // Formu temizle
            $('.is-invalid').removeClass('is-invalid');
            $('#addAttendeeSuccess').addClass('d-none');
            $('#addAttendeeError').addClass('d-none');
            
            console.log('Katılımcı ekleme başlatılıyor...', {
                eventId: eventId,
                fullName: fullName,
                email: email,
                phone: phone
            });
            
            // AJAX isteği
            $.ajax({
                url: '@Url.Action("AddAttendee", "Event", new { area = "EventManager" })',
                type: 'POST',
                data: {
                    eventId: eventId,
                    fullName: fullName,
                    email: email,
                    phone: phone,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                dataType: 'json',
                success: function(response) {
                    console.log('API yanıtı:', response);
                    
                    if (response.success) {
                        // Başarı mesajı göster
                        $('#addAttendeeSuccess').text(response.message).removeClass('d-none');
                        
                        // Formu temizle
                        $('#addAttendeeForm')[0].reset();
                        
                        // 2 saniye sonra modalı kapat ve sayfayı yenile
                        setTimeout(function() {
                            $('#addAttendeeModal').modal('hide');
                            window.location.reload(); // Sayfayı yenilemeyi aktifleştirdim
                        }, 2000);
                    } else {
                        // Hata mesajı göster
                        $('#addAttendeeError').text(response.message || 'Katılımcı eklenirken bir sorun oluştu.').removeClass('d-none');
                        
                        // Validasyon hataları varsa göster
                        if (response.errors) {
                            $.each(response.errors, function(field, error) {
                                $('#' + field).addClass('is-invalid');
                                $('#' + field + 'Feedback').text(error);
                            });
                        }
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX hatası:', { xhr, status, error });
                    
                    // Hata mesajı göster
                    var errorMessage = 'Sunucu ile iletişim kurulamadı.';
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    }
                    
                    $('#addAttendeeError').text(errorMessage).removeClass('d-none');
                }
            });
        }
        
        function getStatusBadge(status, isCancelled) {
            if (isCancelled) {
                return '<span class="badge bg-danger">İptal Edildi</span>';
            }
            
            switch (status) {
                case 0: return '<span class="badge bg-warning">Beklemede</span>';
                case 1: return '<span class="badge bg-success">Onaylandı</span>';
                case 2: return '<span class="badge bg-danger">İptal Edildi</span>';
                default: return '<span class="badge bg-secondary">Bilinmiyor</span>';
            }
        }
        
        function formatDate(dateString) {
            var date = new Date(dateString);
            return date.toLocaleString('tr-TR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
    </script>
} 